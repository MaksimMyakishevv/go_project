definitions:
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.PlaceErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.TokenResponse:
    properties:
      token:
        type: string
    type: object
  dto.AddPlaceDTO:
    properties:
      place_name:
        type: string
    required:
    - place_name
    type: object
  dto.AudioDTO:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  dto.CreatePreferenceDTO:
    properties:
      list_preference_id:
        type: integer
    required:
    - list_preference_id
    type: object
  dto.InputQuestionDTO:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.OSMObject:
    properties:
      id:
        type: integer
      lat:
        description: Только для node
        type: number
      lon:
        description: Только для node
        type: number
      members:
        items:
          properties:
            ref:
              type: integer
            role:
              type: string
            type:
              type: string
          type: object
        type: array
      nodes:
        description: Только для way
        items:
          type: integer
        type: array
      tags:
        additionalProperties:
          type: string
        type: object
      type:
        type: string
    type: object
  dto.ProcessPlacesDTO:
    properties:
      json_data:
        items:
          $ref: '#/definitions/dto.OSMObject'
        type: array
    required:
    - json_data
    type: object
  dto.RegisterUserDTO:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.ListPreference:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Place:
    properties:
      created_at:
        description: Время создания записи
        type: string
      id:
        type: integer
      place_name:
        description: Название места
        type: string
      user_id:
        description: Внешний ключ для связи с User
        type: integer
    type: object
  models.Preference:
    properties:
      id:
        type: integer
      list_preference:
        $ref: '#/definitions/models.ListPreference'
      list_preference_id:
        type: integer
      user_id:
        description: Внешний ключ для связи с User
        type: integer
    type: object
  models.Question:
    properties:
      message:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /ask:
    post:
      consumes:
      - application/json
      description: Ввод текста, который будет передан ЛЛМ и возвращение ответа
      parameters:
      - description: Question data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.InputQuestionDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Вопрос ЛЛМ отправлен
          schema:
            $ref: '#/definitions/models.Question'
        "400":
          description: Invalid input" // Указание структуры ошибки
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Задать вопрос ЛЛМ
      tags:
      - LLM
  /audio/generate:
    post:
      consumes:
      - application/json
      description: Генерирует аудиофайл в формате MP3
      parameters:
      - description: Текст для генерации аудио
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.AudioDTO'
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Бинарные данные аудиофайла
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
      summary: Сгенерировать аудио
      tags:
      - audio
  /cached-response:
    post:
      consumes:
      - application/json
      description: Возвращает закешированный ответ из Redis для конкретного пользователя
        и места
      parameters:
      - description: Запрос с названием места
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.AddPlaceDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Верный формат
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
        "404":
          description: Ответ не найден в кеше
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить закешированный ответ
      tags:
      - places
  /login:
    post:
      consumes:
      - application/json
      description: Login a user by providing email and password, and return a JWT
        token
      parameters:
      - description: User login data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            $ref: '#/definitions/controllers.TokenResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Login user and return JWT token
      tags:
      - auth
  /preferences:
    get:
      description: Возвращает список предпочтений пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Preference'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить предпочтения
      tags:
      - preferences
    post:
      consumes:
      - application/json
      description: Добавляет новое предпочтение для пользователя
      parameters:
      - description: Данные предпочтения
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePreferenceDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Preference'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Добавить предпочтение
      tags:
      - preferences
  /preferences/{id}:
    delete:
      description: Удаляет предпочтение пользователя по ID
      parameters:
      - description: ID предпочтения
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить предпочтение
      tags:
      - preferences
  /process-json:
    post:
      consumes:
      - application/json
      description: Обрабатывает JSON-файл с объектами мест и отправляет их на нейросеть
      parameters:
      - description: JSON-файл с местами
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ProcessPlacesDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
      security:
      - BearerAuth: []
      summary: Обработать JSON-файл с местами
      tags:
      - places
  /process-json-noauth:
    post:
      consumes:
      - application/json
      description: Обрабатывает JSON-файл с объектами мест и отправляет их на нейросеть
      parameters:
      - description: JSON-файл с местами
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ProcessPlacesDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
      summary: Обработать JSON-файл с местами
      tags:
      - places
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user by providing username, password, and email
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "409":
          description: Conflict - user already exists
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register new user
      tags:
      - auth
  /users/history:
    get:
      description: Возвращает список мест, связанных с пользователем
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Place'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.PlaceErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить историю запросов
      tags:
      - places
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
