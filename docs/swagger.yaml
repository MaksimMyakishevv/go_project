definitions:
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.TokenResponse:
    properties:
      token:
        type: string
    type: object
  dto.CreatePreferenceDTO:
    properties:
      place:
        description: Название места
        type: string
      priority:
        description: Приоритет должен быть неотрицательным
        minimum: 0
        type: integer
    required:
    - place
    type: object
  dto.InputQuestionDTO:
    properties:
      question:
        type: string
    required:
    - question
    type: object
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterUserDTO:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.UpdatePreferenceDTO:
    properties:
      priority:
        description: Новый приоритет предпочтения
        minimum: 0
        type: integer
    type: object
  models.Preference:
    properties:
      id:
        type: integer
      place:
        description: Название места
        type: string
      priority:
        description: Приоритет
        type: integer
      user_id:
        description: Внешний ключ для связи с User
        type: integer
    type: object
  models.Question:
    properties:
      question:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /ask:
    post:
      consumes:
      - application/json
      description: Ввод текста, который будет передан ЛЛМ и возвращение ответа
      parameters:
      - description: Question data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.InputQuestionDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Вопрос ЛЛМ отправлен
          schema:
            $ref: '#/definitions/models.Question'
        "400":
          description: Invalid input" // Указание структуры ошибки
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Задать вопрос ЛЛМ
      tags:
      - LLM
  /helloworld:
    get:
      consumes:
      - application/json
      description: A simple example endpoint that responds with the string "helloworld"
      produces:
      - application/json
      responses:
        "200":
          description: helloworld
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Returns "helloworld"
      tags:
      - Example
  /login:
    post:
      consumes:
      - application/json
      description: Login a user by providing email and password, and return a JWT
        token
      parameters:
      - description: User login data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            $ref: '#/definitions/controllers.TokenResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Login user and return JWT token
      tags:
      - auth
  /preferences:
    get:
      description: Возвращает список предпочтений пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Preference'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить предпочтения
      tags:
      - preferences
    post:
      consumes:
      - application/json
      description: Добавляет новое предпочтение для пользователя
      parameters:
      - description: Данные предпочтения
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePreferenceDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Preference'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Добавить предпочтение
      tags:
      - preferences
  /preferences/{id}:
    delete:
      description: Удаляет предпочтение пользователя по ID
      parameters:
      - description: ID предпочтения
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить предпочтение
      tags:
      - preferences
    put:
      consumes:
      - application/json
      description: Изменяет приоритет предпочтения пользователя
      parameters:
      - description: ID предпочтения
        in: path
        name: id
        required: true
        type: integer
      - description: Новый приоритет
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePreferenceDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Preference'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить предпочтение
      tags:
      - preferences
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user by providing username, password, and email
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "409":
          description: Conflict - user already exists
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
